//贪心算法
problem 455 easy
class Solution {
public:
    int findContentChildren(vector<int>& g, vector<int>& s) {
        sort(g.begin(),g.end());
        sort(s.begin(),s.end());
        int res=0,j=g.size()-1;
        for(int i=s.size()-1;i>=0;i--){
            while(j>=0){
            if(s[i]>=g[j]){
                res++;
                j--;
                break;
            }
            else j--;
            }
        }
        return res;
    }
};

problem 135 hard //也不是很hard
class Solution {
public:
    int candy(vector<int>& ratings) {
        vector<int> sweet(ratings.size(),1);
        int res=0;
        for(int i=0;i<ratings.size();i++){
            if(i<ratings.size()-1&&ratings[i]<ratings[i+1]){
                sweet[i+1]=sweet[i]+1;
            }
        }
        for(int i=ratings.size()-1;i>=0;i--){
            if(i>0&&ratings[i-1]>ratings[i]){
                sweet[i-1]=max(sweet[i-1],sweet[i]+1);
            }
        }
        for(int i=0;i<sweet.size();i++){
            res+=sweet[i];
        }
        return res;
    }
};
Problem 435 //第一次做区间贪心w
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& nums) {
        if(nums.empty()) return 0;
        sort(nums.begin(),nums.end(),cmp);
        int res=1;
        vector<vector<int>> path;
        path.push_back(nums[0]);
        for(int i=0;i<nums.size()-1;i++){
            vector<int> pos=path.back();
            if(pos[1]<=nums[i+1][0]){
                res++;
                path.push_back(nums[i+1]);
            }
        }
        int ans=nums.size()-res;
        return ans;
    }
    static bool cmp(vector<int>& a,vector<int>& b){
            return a[1]<b[1];
        }
};
Problem 605
class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int res=0;
        if(flowerbed.empty()) return false;
        if(flowerbed.size()==1){
            if(flowerbed[0]==0){
                return true;
            }
            else {
                if(n==0) return true;
                else return false;
            }
        }
        for(int i=0;i<flowerbed.size();i++){
            if(i==0){
                if(flowerbed[i]==0&&flowerbed[i+1]==0){
                    res++;
                    flowerbed[i]=1;
                }
            }
            else if(i<=flowerbed.size()-2){
                if(flowerbed[i-1]==0&&flowerbed[i]==0&&flowerbed[i+1]==0){
                    res++;
                    flowerbed[i]=1;
                }
            }
            else{
                if(flowerbed[i-1]==0&&flowerbed[i]==0){
                    res++;
                    flowerbed[i]=1;
                }
            }
        }
        bool ans;
        if(res>=n) ans=true;
        else ans=false;
        return ans;
    }
};
//双指针
Problem 167
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> res;
        int p1=0,p2=numbers.size()-1;
        if(numbers.empty()) return res;
        while(numbers[p1]+numbers[p2]!=target){
            if(numbers[p1]+numbers[p2]<target){
                p1++;
            }
            else{
                p2--;
            }
        }
        p1++;
        p2++;
        res.push_back(p1);
        res.push_back(p2);
        return res;
    }
};
